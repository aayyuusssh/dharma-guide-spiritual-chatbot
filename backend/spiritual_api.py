from flask import Flask, jsonify, request
from flask_cors import CORS
from datetime import datetime, timezone, timedelta
import os

IST = timezone(timedelta(hours=5, minutes=30))

app = Flask(__name__)
CORS(app, origins="*")

# G4F import with error handling (safe approach)
try:
    from g4f.client import Client
    client = Client()
    g4f_available = True
    print("тЬЕ G4F successfully imported")
except Exception as e:
    print(f"тЭМ G4F import failed: {e}")
    client = None
    g4f_available = False

def get_spiritual_response(question, temperature=0.8, top_p=0.82, top_K=50, max_tokens=600):
    """Your spiritual wisdom function with G4F integration"""
    if not g4f_available or not client:
        return """ЁЯЩП рдирдорд╕реНрддреЗ! TATVA рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред 

рддрдХрдиреАрдХреА рдХрд╛рд░рдгреЛрдВ рд╕реЗ рдЗрд╕ рд╕рдордп G4F AI рд╕реЗрд╡рд╛ рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИ, рдкрд░рдВрддреБ рдореИрдВ рдЖрдкрдХреЛ рдХреБрдЫ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗ рд╕рдХрддрд╛ рд╣реВрдБ:

ЁЯУ┐ рдЧреАрддрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░: "рдпреЛрдЧрдГ рдХрд░реНрдорд╕реБ рдХреМрд╢рд▓рдореН" - рдХрд░реНрдо рдореЗрдВ рдХреБрд╢рд▓рддрд╛ рд╣реА рдпреЛрдЧ рд╣реИред

ЁЯХЙя╕П рдзреИрд░реНрдп рд░рдЦреЗрдВ, рд╕рддреНрдп рдХрд╛ рдорд╛рд░реНрдЧ рдХрднреА рдЖрд╕рд╛рди рдирд╣реАрдВ рд╣реЛрддрд╛ред рдЖрдкрдХрд╛ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкреНрд░рд╢реНрди рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред

рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред ЁЯЩП"""
    
    try:
        # Enhanced spiritual prompt for authentic responses
        spiritual_prompt = f"""You are a spiritual advisor. Answer this question with references from Bhagavad Gita, Ramayana, or Mahabharata, plus modern psychology perspective. Keep it practical and helpful.
User's spiritual question: {question}
"""

        # Primary G4F call with your preferred parameters
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": spiritual_prompt}],
            temperature=temperature,
            max_tokens=max_tokens,
            top_K=top_K,
            top_p=top_p,
        )
        return response.choices[0].message.content
        
    except Exception as e1:
        print(f"Primary G4F model failed: {e1}")
        try:
            # Fallback to GPT-4 with simpler prompt
            fallback_response = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": f"You are a spiritual advisor with knowledge of Vedic scriptures. Provide wise guidance for: {question}"}],
                temperature=temperature,
                max_tokens=max_tokens,
                top_K=top_K,
                top_p=top_p,
            )
            return fallback_response.choices[0].message.content
        except Exception as e2:
            print(f"Fallback G4F model also failed: {e2}")
            return f"""ЁЯЩП рдкреНрд░рд┐рдп рд╕рд╛рдзрдХ, рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди "{question}" рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред

рдЗрд╕ рд╕рдордп рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рдХрд╛рд░рдг рд╡рд┐рд╕реНрддреГрдд рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рдкрд╛ рд░рд╣рд╛, рдкрд░рдВрддреБ рдХреБрдЫ рдорд╛рд░реНрдЧрджрд░реНрд╢рди:

ЁЯХЙя╕П рдЧреАрддрд╛ рдореЗрдВ рд╢реНрд░реАрдХреГрд╖реНрдг рдХрд╣рддреЗ рд╣реИрдВ: "рдорди рдПрд╡ рдордиреБрд╖реНрдпрд╛рдгрд╛рдВ рдХрд╛рд░рдгрдВ рдмрдиреНрдзрдореЛрдХреНрд╖рдпреЛрдГ"
рдЕрд░реНрде: рдорди рд╣реА рдордиреБрд╖реНрдп рдХреЗ рдмрдВрдзрди рдФрд░ рдореЛрдХреНрд╖ рдХрд╛ рдХрд╛рд░рдг рд╣реИред

ЁЯТл рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рдЖрдкрдХреЗ рдЕрдВрддрд░реНрдорди рдореЗрдВ рд╣реА рд╣реИред рдзреНрдпрд╛рди рдФрд░ рдЖрддреНрдордЪрд┐рдВрддрди рдХрд░реЗрдВред

ЁЯЩП рдзреИрд░реНрдп рд░рдЦреЗрдВ, рд╕рддреНрдп рдХреА рдЦреЛрдЬ рдореЗрдВ рд╕рдордп рд▓рдЧрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред

реР рд╢рд╛рдиреНрддрд┐ рд╢рд╛рдиреНрддрд┐ рд╢рд╛рдиреНрддрд┐рдГ"""

@app.route('/')
def home():
    return jsonify({
        'message': 'ЁЯХЙя╕П TATVA Backend on Render!',
        'status': 'healthy',
        'platform': 'render',
        'g4f_status': 'available' if g4f_available else 'loading'
    })

@app.route('/api/health')
def health():
    return jsonify({
        'status': 'healthy',
        'message': 'ЁЯХЙя╕П Render Backend Connected Successfully!',
        'platform': 'render.com',
        'g4f_integration': 'active' if g4f_available else 'fallback_ready',
        'spiritual_responses': 'enabled'
    })

@app.route('/api/spiritual-chat', methods=['POST'])
def spiritual_chat():
    try:
        data = request.get_json() or {}
        user_message = data.get('message', '').strip()
        
        if not user_message:
            return jsonify({
                'success': False,
                'error': 'рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд▓рд┐рдЦреЗрдВред'
            }), 400
        
        print(f"\n[TATVA] New spiritual query: {user_message[:50]}...")
        
        # Extract G4F parameters from frontend (your original parameters)
        temperature = data.get('temperature', 0.8)
        top_p = data.get('top_p', 0.82) 
        top_K = data.get('top_K', 50)
        max_tokens = data.get('max_tokens', 600)
        
        print(f"[TATVA] Using parameters - temp: {temperature}, top_p: {top_p}, tokens: {max_tokens}")
        
        # Get spiritual wisdom response
        spiritual_response = get_spiritual_response(
            user_message, 
            temperature, 
            top_p, 
            top_K, 
            max_tokens
        )
        
        print(f"[TATVA] Response generated: {len(spiritual_response)} characters")
        
        ist_time = datetime.now(IST).strftime('%H:%M')
        return jsonify({
            'success': True,
            'response': spiritual_response,
            'timestamp': ist_time,
            'g4f_used': g4f_available,
            'platform': 'render'
        })
        
    except Exception as e:
        ist_time = datetime.now(IST).strftime('%H:%M')
        print(f"[ERROR] Spiritual chat error: {str(e)}")

        return jsonify({
            'success': True,
            'response': f'ЁЯЩП рдкреНрд░рдгрд╛рдо! рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди "{user_message}" рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ рд╣реИред рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рдХрд╛рд░рдг рд╡рд┐рд╕реНрддреГрдд рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рдкрд╛ рд░рд╣рд╛, рдкрд░рдВрддреБ TATVA рд╕реЗрд╡рд╛ рд╕рдХреНрд░рд┐рдп рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред ЁЯХЙя╕П',
            'timestamp': ist_time,
            'platform': 'render'
        })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"ЁЯХЙя╕П TATVA Spiritual API starting on Render port {port}")
    print(f"ЁЯдЦ G4F Status: {'Available' if g4f_available else 'Fallback Ready'}")
    app.run(host='0.0.0.0', port=port, debug=False)
